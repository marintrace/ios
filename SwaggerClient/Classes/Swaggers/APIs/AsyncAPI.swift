//
// AsyncAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class AsyncAPI {
    /**
     Queue Health Report

     - parameter body: (body)  
     - parameter authorization: (header)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func queueHealthReport(body: HealthReport, authorization: String, completion: @escaping ((_ data: CreatedAsyncTask?,_ error: Error?) -> Void)) {
        queueHealthReportWithRequestBuilder(body: body, authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Queue Health Report
     - POST /report-health

     - examples: [{contentType=application/json, example={
  "task_id" : "task_id",
  "timestamp" : 0,
  "status" : "QUEUED"
}}]
     - parameter body: (body)  
     - parameter authorization: (header)  

     - returns: RequestBuilder<CreatedAsyncTask> 
     */
    open class func queueHealthReportWithRequestBuilder(body: HealthReport, authorization: String) -> RequestBuilder<CreatedAsyncTask> {
        let path = "/report-health"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<CreatedAsyncTask>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Queue Interaction Report

     - parameter body: (body)  
     - parameter authorization: (header)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func queueInteractionReport(body: InteractionReport, authorization: String, completion: @escaping ((_ data: CreatedAsyncTask?,_ error: Error?) -> Void)) {
        queueInteractionReportWithRequestBuilder(body: body, authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Queue Interaction Report
     - POST /report-interaction

     - examples: [{contentType=application/json, example={
  "task_id" : "task_id",
  "timestamp" : 0,
  "status" : "QUEUED"
}}]
     - parameter body: (body)  
     - parameter authorization: (header)  

     - returns: RequestBuilder<CreatedAsyncTask> 
     */
    open class func queueInteractionReportWithRequestBuilder(body: InteractionReport, authorization: String) -> RequestBuilder<CreatedAsyncTask> {
        let path = "/report-interaction"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<CreatedAsyncTask>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Set Active User

     - parameter authorization: (header)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func queueSetActiveUser(authorization: String, completion: @escaping ((_ data: CreatedAsyncTask?,_ error: Error?) -> Void)) {
        queueSetActiveUserWithRequestBuilder(authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Set Active User
     - POST /set-active-user

     - examples: [{contentType=application/json, example={
  "task_id" : "task_id",
  "timestamp" : 0,
  "status" : "QUEUED"
}}]
     - parameter authorization: (header)  

     - returns: RequestBuilder<CreatedAsyncTask> 
     */
    open class func queueSetActiveUserWithRequestBuilder(authorization: String) -> RequestBuilder<CreatedAsyncTask> {
        let path = "/set-active-user"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<CreatedAsyncTask>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

}
